load("//opa/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
load("//opa/private:versions.bzl", "OPA_VERSIONS")

def _opa_sdk_impl(ctx):
    ctx.report_progress("Downloading and extracting Open Policy Agent executable")

    ctx.download(
        url = ctx.attr.urls,
        output = "opa",
        executable = True,
        sha256 = ctx.attr.sha256,
    )

    build_content = """# Generated by mylang/repositories.bzl
load("@ohno_cloud_tools_manifests//opa:toolchain.bzl", "opa_toolchain")

opa_toolchain(
    name = "opa_toolchain",
    cli = select({
        "@bazel_tools//src/conditions:host_windows": "opa.exe",
        "//conditions:default": "opa",
    }),
)
"""

    # Base BUILD file for this repository
    ctx.file("BUILD.bazel", build_content)

opa_sdk = repository_rule(
    implementation = _opa_sdk_impl,
    attrs = {
        "urls": attr.string_list(mandatory = True),
        "sha256": attr.string(mandatory = True),
    },
)

def opa_register_toolchains(name, version = "1.1.0", register = True, **kwargs):
    """Convenience macro for users which does typical setup.
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "opa1_14"
        register: whether to call through to native.register_toolchains.
            Should be True for WORKSPACE users, but false when used under bzlmod extension
        **kwargs: passed to each opa_sdk call
    """
    version_info = OPA_VERSIONS.get(version)

    for platform in version_info.keys():
        opa_sdk(
            name = name + "_" + platform,
            **version_info.get(platform)
        )
        if register:
            native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )
